image: gitpod/workspace-full

ports:
  - port: 8888
    name: Jupyter Notebook
    onOpen: open-preview
    visibility: public
  - port: 9001
    name: MinIO Console
    onOpen: open-preview
    visibility: public
  - port: 8080
    name: Spark UI
    onOpen: open-preview
    visibility: public
  - port: 8181
    name: Iceberg REST
    onOpen: open-preview
    visibility: public

tasks:
  - name: Download JAR Dependencies
    init: |
      echo "Downloading JAR dependencies..."
      mkdir -p jars
      curl -L -o jars/hadoop-aws-3.3.4.jar https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.4/hadoop-aws-3.3.4.jar
      curl -L -o jars/aws-java-sdk-bundle-1.12.262.jar https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.12.262/aws-java-sdk-bundle-1.12.262.jar
      echo "JAR dependencies downloaded successfully!"

  - name: Start Services
    init: |
      echo "Starting services..."
      docker-compose up -d
      sleep 15
      echo "Services started!"
      echo "Jupyter Notebook: http://localhost:8888"
      echo "MinIO Console: http://localhost:9001 (admin/password)"
      echo "Spark UI: http://localhost:8080"
      echo "Iceberg REST: http://localhost:8181"
      echo ""
      echo "Opening Jupyter notebook in preview..."
      sleep 5
    command: |
      docker-compose logs -f &
      sleep 10
      echo "Click on the Jupyter Notebook tab above to open the notebook interface"
      wait

  - name: Open Iceberg PII Demo Notebook
    init: |
      echo "Preparing to open Iceberg PII Deletion Demo notebook..."
    command: |
      ./open_notebook.sh

  - name: Auto-open Notebook
    init: |
      echo "Setting up automatic notebook opening..."
    command: |
      # Wait for all services to be ready
      sleep 60
      # Open the notebook automatically
      echo "Auto-opening the Iceberg PII Deletion Demo notebook..."
      gp preview "https://${GITPOD_WORKSPACE_URL#https://}notebooks/iceberg_pii_deletion_demo.ipynb" &
      echo "Notebook should now be open in your browser!"

vscode:
  extensions:
    - ms-python.python
    - ms-toolsai.jupyter

env:
  AWS_ACCESS_KEY_ID: admin
  AWS_SECRET_ACCESS_KEY: password
  AWS_REGION: us-east-1